{"version":3,"sources":["firebase.js","App/styledComponents.js","App/App.js","serviceWorker.js","index.js"],"names":["firebase","AppLayout","styled","div","_templateObject","Subscribe","_templateObject2","Presentation","_templateObject3","Form","form","_templateObject4","Input","input","_templateObject5","Button","button","_templateObject6","News","_templateObject7","App","_useState","useState","_useState2","Object","slicedToArray","email","setEmail","_useState3","_useState4","isFormSubmitted","setFormSubmitted","react_default","a","createElement","target","rel","href","onSubmit","event","preventDefault","type","onChange","value","placeholder","onClick","firestore","collection","add","disabled","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAceA,0nDCZR,IAAMC,EAAYC,IAAOC,IAAVC,KAKTC,EAAYH,IAAOC,IAAVG,KAiBTC,EAAeL,IAAOC,IAAVK,KAKZC,EAAOP,IAAOQ,KAAVC,KAKJC,EAAQV,IAAOW,MAAVC,KAaLC,EAASb,IAAOc,OAAVC,KA4BNC,EAAOhB,IAAOC,IAAVgB,KCnBFC,MAnDf,WAAe,IAAAC,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAE+BN,oBAAS,GAFxCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEWE,EAFXF,EAAA,GAab,OACEG,EAAAC,EAAAC,cAACjC,EAAD,KACE+B,EAAAC,EAAAC,cAAC7B,EAAD,KACE2B,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAC3B,EAAD,KACEyB,EAAAC,EAAAC,cAAA,+JAEkC,IAChCF,EAAAC,EAAAC,cAAA,KAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,qBAAlD,cAHF,KAQAL,EAAAC,EAAAC,cAAA,iDAC+B,IAD/B,eACgD,IADhD,gCAC4E,IAC1EF,EAAAC,EAAAC,cAAA,KAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,6BAAlD,sBAEK,IAJP,oBAKiB,IALjB,yCAQFL,EAAAC,EAAAC,cAAA,4BACmB,IADnB,8CACgE,IADhE,yCAGAF,EAAAC,EAAAC,cAACzB,EAAD,CAAM6B,SAAU,SAAAC,GAAK,OAAIA,EAAMC,mBAC7BR,EAAAC,EAAAC,cAACtB,EAAD,CAAO6B,KAAK,QAAQC,SAAU,SAAAH,GAAK,OAAIZ,EAASY,EAAMJ,OAAOQ,QAAQC,YAAY,UACjFZ,EAAAC,EAAAC,cAACnB,EAAD,CAAQ0B,KAAK,SAASI,QAnC9B,WACE7C,EACG8C,YACAC,WAAW,SACXC,IAAI,CAAEtB,UAETK,GAAiB,IA6BsCkB,SAAUnB,GAA3D,IACI,IADJ,cAKJE,EAAAC,EAAAC,cAAChB,EAAD,KACEc,EAAAC,EAAAC,cAAA,oCCtCYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DHPJtD,SAASuD,cATM,CACbC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,iBIAvBC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e733ce3b.chunk.js","sourcesContent":["export function initFirebase() {\n  // Initialize Firebase\n  const config = {\n    apiKey: 'AIzaSyCtSCRnzTPWoAH9PEPN8OeRjvvS2gNS19Q',\n    authDomain: 'my-project-1501757537357.firebaseapp.com',\n    databaseURL: 'https://my-project-1501757537357.firebaseio.com',\n    projectId: 'my-project-1501757537357',\n    storageBucket: 'my-project-1501757537357.appspot.com',\n    messagingSenderId: '966018306178',\n  };\n\n  firebase.initializeApp(config); // eslint-disable-line no-undef\n}\n\nexport default firebase; // eslint-disable-line no-undef\n","import styled from 'styled-components';\n\nexport const AppLayout = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nexport const Subscribe = styled.div`\n  background-color: #282c34;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  float: left;\n  height: 100%;\n  justify-content: center;\n  padding: 0 2rem;\n  width: calc(62.5% - 4rem);\n\n  p {\n    font-size: 1.25rem;\n    margin: 0.5rem 0;\n  }\n`;\n\nexport const Presentation = styled.div`\n  margin: 2rem 0;\n  max-width: 54rem;\n`;\n\nexport const Form = styled.form`\n  margin: 1rem 0 4rem;\n  position: relative;\n`;\n\nexport const Input = styled.input`\n  align-items: center;\n  appearance: none;\n  border-radius: 0.5rem;\n  border: none;\n  box-shadow: none;\n  display: flex;\n  font-size: 1rem;\n  height: 3rem;\n  padding: 0 1rem;\n  width: calc(100% - 2rem);\n`;\n\nexport const Button = styled.button`\n  align-items: center;\n  background: #639fbf;\n  border: none;\n  border-radius: 0.25rem;\n  display: flex;\n  color: #fff;\n  font-size: 1rem;\n  height: 2rem;\n  justify-content: center;\n  position: absolute;\n  right: 1rem;\n  top: 0.375rem;\n  transition: all 0.5s;\n  width: 6rem;\n\n  &:disabled {\n    background-color: #c1c1c1;\n  }\n\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    opacity: 0.75;\n    outline: none;\n  }\n`;\n\nexport const News = styled.div`\n  background-color: #f4f4f4;\n  float: right;\n  height: 100%;\n  width: 37.5%;\n`;\n","import React, { useState } from 'react';\n\nimport { AppLayout, Subscribe, Presentation, Form, Input, Button, News } from './styledComponents';\nimport firebase from '../firebase';\n\nfunction App() {\n  const [email, setEmail] = useState('');\n  const [isFormSubmitted, setFormSubmitted] = useState(false);\n\n  function registerUserMail() {\n    firebase\n      .firestore()\n      .collection('users')\n      .add({ email });\n\n    setFormSubmitted(true);\n  }\n\n  return (\n    <AppLayout>\n      <Subscribe>\n        <h1>Tournois Pokemon Go Bordeaux</h1>\n        <Presentation>\n          <p>\n            Ce projet a été pour permettre aux joueurs de Pokemon Go sur Bordeaux et alentours de se regrouper afin de\n            participer à des tournois de la{' '}\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://silph.gg/\">\n              Silph Road\n            </a>\n            .\n          </p>\n          <p>\n            Si vous êtes intéressé par l{\"'\"}initiative n{\"'\"}hésitez pas à rejoindre{' '}\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://discord.gg/mR25Vq\">\n              ce serveur discord\n            </a>{' '}\n            utilisé pour l{\"'\"}organisation de potentiels tournois.\n          </p>\n        </Presentation>\n        <p>\n          Si tu souhaite t{\"'\"}inscrire pour participer à un tournoi, n{\"'\"}hésite pas à rentrer ton mail :\n        </p>\n        <Form onSubmit={event => event.preventDefault()}>\n          <Input type=\"email\" onChange={event => setEmail(event.target.value)} placeholder=\"email\" />\n          <Button type=\"submit\" onClick={registerUserMail} disabled={isFormSubmitted}>\n            s{\"'\"}inscrire\n          </Button>\n        </Form>\n      </Subscribe>\n      <News>\n        <h3>Dernières News :</h3>\n      </News>\n    </AppLayout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initFirebase } from './firebase';\nimport './css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ninitFirebase();\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}